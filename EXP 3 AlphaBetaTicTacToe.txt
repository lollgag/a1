class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # 3x3 board
        self.current_player = 'X'

    def print_board(self):
        for i in range(3):
            print("|".join(self.board[i * 3:(i + 1) * 3]))
            if i < 2:
                print("-----")

    def is_winner(self, player):
        winning_combinations = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # horizontal
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # vertical
            (0, 4, 8), (2, 4, 6)               # diagonal
        ]
        return any(all(self.board[i] == player for i in combo) for combo in winning_combinations)

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def evaluate(self):
        if self.is_winner('X'):
            return 10
        elif self.is_winner('O'):
            return -10
        return 0

    def alpha_beta(self, depth, alpha, beta, maximizing_player):
        score = self.evaluate()
        if score != 0:
            return score

        if not self.available_moves():
            return 0  # Draw

        if maximizing_player:
            max_eval = float('-inf')
            for move in self.available_moves():
                self.board[move] = 'X'
                eval = self.alpha_beta(depth + 1, alpha, beta, False)
                self.board[move] = ' '  # Undo move
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = float('inf')
            for move in self.available_moves():
                self.board[move] = 'O'
                eval = self.alpha_beta(depth + 1, alpha, beta, True)
                self.board[move] = ' '  # Undo move
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval

    def best_move(self):
        best_value = float('-inf')
        best_move = -1
        for move in self.available_moves():
            self.board[move] = 'X'
            move_value = self.alpha_beta(0, float('-inf'), float('inf'), False)
            self.board[move] = ' '  # Undo move
            if move_value > best_value:
                best_value = move_value
                best_move = move
        return best_move

# Example of using the TicTacToe class with Alpha-Beta pruning
if __name__ == "__main__":
    game = TicTacToe()
    while True:
        game.print_board()
        if game.current_player == 'X':
            move = game.best_move()
            if move != -1:
                game.board[move] = 'X'
                print(f"AI placed 'X' in position {move}")
        else:
            user_move = int(input("Enter your move (0-8): "))
            if user_move in game.available_moves():
                game.board[user_move] = 'O'
            else:
                print("Invalid move. Try again.")
        
        if game.is_winner(game.current_player):
            game.print_board()
            print(f"{game.current_player} wins!")
            break
        if not game.available_moves():
            game.print_board()
            print("It's a draw!")
            break

        game.current_player = 'O' if game.current_player == 'X' else 'X'
